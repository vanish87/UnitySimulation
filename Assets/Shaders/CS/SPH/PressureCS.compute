#pragma kernel Pressure

#include "SPHParameter.hlsl"
#include "Kernel.hlsl"

#include "../DispatcherHelper.hlsl"
#include "../DefaultGrid.hlsl"
#include "../GridData.hlsl"
#include "../GridHelper.hlsl"
#include "../DefaultParticle.hlsl"

StructuredBuffer<Particle> _ParticleBufferRead;
StructuredBuffer<ParticleDensity> _ParticleDensityBufferRead;
RWStructuredBuffer<ParticleForce> _ParticleForceBuffer;


[numthreads(128,1,1)]
void Pressure(uint3 id : SV_DispatchThreadID)
{
    RETURN_IF_INVALID(id);

    const uint p_id = id.x;

	Particle p = _ParticleBufferRead[p_id];
	float3 force = _ParticleForceBuffer[p_id].linearForce;
	if(p.IsActive())
	{
		const float h_sq = pow(_H, 2);

		float3 p_pos = p.pos;
		float  P_density  = _ParticleDensityBufferRead[p_id].density;
		float3 P_velocity = p.vel;
		float  P_pressure = CalculateSEPressure(P_density, _PressureK.x, _PressureK.y, _RestDensity);

		float3 gradPressure = float3(0, 0, 0);
		
		FOR_EACH_NEIGHBOR_START(p_pos, n_id, _GridBuffer)
		{
			Particle np = _ParticleBufferRead[n_id];
			if(!np.IsActive()) continue;

			float3 n_pos = np.pos;

			float3 r = p_pos - n_pos;
			float r_sq = dot(r, r);
			if (r_sq < h_sq && p_id != n_id)
			{
				float3 N_velocity = np.vel;
				float  N_density = _ParticleDensityBufferRead[n_id].density;
				float  N_pressure = CalculateSEPressure(N_density, _PressureK.x, _PressureK.y, _RestDensity);

				gradPressure += CalculateGradPressure(_H, _ParticleMass, r, P_pressure, N_pressure, P_density, N_density);
			}
		}
		FOR_EACH_NEIGHBOR_END

		force += -(1.0/P_density) * P_density *  gradPressure;
	}

	_ParticleForceBuffer[p_id].linearForce = force;
}
