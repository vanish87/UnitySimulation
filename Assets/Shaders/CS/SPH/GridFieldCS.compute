#pragma kernel GridToTexture

#include "../DispatcherHelper.hlsl"
#include "../DefaultGrid.hlsl"
#include "../GridData.hlsl"
#include "../GridHelper.hlsl"
#include "../DefaultParticle.hlsl"

RWTexture2D<float2> _Velocity;
RWTexture2D<float> _Density;
RWTexture2D<float2> _Vorticity;
RWTexture2D<float2> _Force;
StructuredBuffer<Particle> _ParticleBufferRead;
StructuredBuffer<ParticleDensity> _ParticleDensityBuffer;
StructuredBuffer<ParticleForce> _ParticleForceBuffer;

[numthreads(1,1,1)]
void GridToTexture(uint3 id : SV_DispatchThreadID)
{
	uint2 uv = id.xy;
	float4 velocity = 0;
	float4 vorticity = 0;
	float2 density = 0;
	float4 force = 0;
	for(int h = 0; h < _GridSize.z; ++h)
	{
		FOR_EACH_PARTICLE_IN_CELL_START(int3(uv.x, uv.y, h), p_id, _GridBuffer)
		{
			Particle p = _ParticleBufferRead[p_id];
			if(!p.IsActive()) continue;

			float p_density = _ParticleDensityBuffer[p_id].density;
			float3 p_force = _ParticleForceBuffer[p_id].linearForce;
			// float3 p_force = _ParticleForceBuffer[p_id].transferForce;

			velocity += float4(p.vel.xy, 1, 1.0f);
			vorticity += float4(p.w.z, -p.w.z, 1, 1.0f);
			density += float2(p_density, 1);
			force += float4(p_force, 1);
		}
		FOR_EACH_PARTICLE_IN_CELL_END
	}

	int2 tex_uv = uv;

	if(velocity.z > 0) velocity /= velocity.z;
	if(vorticity.z > 0) vorticity /= vorticity.z;
	if(density.y > 0) density /= density.y;
	if(force.w > 0) force /= force.w;

	_Velocity[tex_uv] = velocity.xy;
	_Density[tex_uv] = density.x/2000;
	_Vorticity[tex_uv] = vorticity.xy;
	_Force[tex_uv] = force.xy;

}


