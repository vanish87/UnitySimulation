#pragma kernel GridToTexture

#include "../DispatcherHelper.hlsl"
#include "../GridData.hlsl"
#include "../GridHelper.hlsl"
#include "../DefaultParticle.hlsl"

RWTexture2D<float4> _Velocity;
RWTexture2D<float4> _Vorticity;
StructuredBuffer<Particle> _ParticleBufferRead;
// StructuredBuffer<ParticleDensity> _ParticleDensityBuffer;

[numthreads(1,1,1)]
void GridToTexture(uint3 id : SV_DispatchThreadID)
{
	uint2 uv = id.xy;
	float4 velocity = 0;
	float4 vorticity = 0;
	float2 density = 0;
	for(int h = 0; h < _GridSize.y; ++h)
	{
		FOR_EACH_PARTICLE_IN_CELL_START(int3(uv.x, h, uv.y), p_id)
		{
			Particle p = _ParticleBufferRead[p_id];
			if(!p.IsActive()) continue;

			// float p_density = _ParticleDensityBuffer[p_id].density;

			velocity += float4(p.vel.xz, 1, 1.0f);
			vorticity += float4(p.w.y, -p.w.y, 1, 1.0f);
			// density += float2(p_density, 1);
		}
		FOR_EACH_PARTICLE_IN_CELL_END
	}

	int2 tex_uv = uv;
	float4 currentVel = _Velocity[tex_uv];
	// float4 currentVor = _Vorticity[tex_uv];
	_Velocity[tex_uv] = lerp(currentVel, velocity, 0.5);
	// _Vorticity[tex_uv] = lerp(currentVor , float4(1-(den+vor)*speed,0,0,1), 1);

}


