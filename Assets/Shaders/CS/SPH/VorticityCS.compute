#pragma kernel Vorticity

#include "Common.hlsl"

StructuredBuffer<Particle> _ParticleBufferRead;
StructuredBuffer<ParticleDensity> _ParticleDensityBufferRead;
RWStructuredBuffer<ParticleForce> _ParticleForceBuffer;


[numthreads(128,1,1)]
void Vorticity(uint3 id : SV_DispatchThreadID)
{
    RETURN_IF_INVALID(id);

    const uint p_id = id.x;
	const float h_sq = pow(_H, 2);

	Particle p = _ParticleBufferRead[p_id];
	float3 nonPressureForce = 0;
	float3 transferForce = 0;
	float3 transferTorque = 0;

	if(p.IsActive())
	{
		float3 p_pos = p.pos;
		float3 P_vel = p.vel;
		float3 P_w = p.w;

		FOR_EACH_NEIGHBOR_START(p_pos, n_id, _GridBuffer)
		{
			Particle np = _ParticleBufferRead[n_id];
			if(!np.IsActive()) continue;

			float3 n_pos = np.pos;

			float3 r = p_pos - n_pos;
			float r_sq = dot(r, r);
			if (r_sq < h_sq && p_id != n_id)
			{
				float3 N_w = np.w;
				float3 N_vel = np.vel;
				float  N_density = _ParticleDensityBufferRead[n_id].density;

				float3 r = p_pos - n_pos;

				float3 gradW = WGrad(r, _H);
				transferForce  += -_ParticleMass/N_density *(cross(P_w - N_w, gradW));
				transferTorque += -_ParticleMass/N_density *(cross(P_vel - N_vel, gradW));
			}
		}
		FOR_EACH_NEIGHBOR_END

		transferForce = _ParticleMass * _NU_T * transferForce;
		transferTorque = _ParticleMass * _NU_T * (transferTorque - 2 * P_w);
	}


	_ParticleForceBuffer[p_id].linearForce = nonPressureForce;
	_ParticleForceBuffer[p_id].transferForce = transferForce;
	_ParticleForceBuffer[p_id].transferTorque = transferTorque;
}